from part2.chapter10 import MinHeap


class HuffNode:

    def __init__(self, symbol: str, frequency: float):
        self.symbol = symbol
        self.frequency = frequency

    def __str__(self):
        return f"(Symbol={self.symbol}, Frequency={self.frequency})"


class InnerNode:

    def __init__(self, left_child, right_child):
        self.left_child = left_child
        self.right_child = right_child

        self.frequency = self.left_child.frequency + self.right_child.frequency


def huffman_code(alphabet: list[HuffNode]) -> InnerNode:
    """An O(n log n) algorithm to generate a Huffman code. Given a list of nodes initialized
    with a symbol and a frequency, returns the root node of a tree that has the minimum
    possible average leaf depth, representing a prefix-free binary code with the minimum
    average encoding length"""

    # initialize a priority queue with all symbols, ranked by frequency
    priority_q = MinHeap(alphabet, key=lambda symbol: symbol.frequency)

    # while the queue has more than one entry, combine the two trees with the smallest
    # frequencies into one and reinsert it back into the queue
    while priority_q.size() > 1:
        min_tree = priority_q.extract_min()
        second_min_tree = priority_q.extract_min()

        merge_node = InnerNode(min_tree, second_min_tree)
        priority_q.add(merge_node)

    return priority_q.get_min()


def get_encoding_lengths(root, current_level=0, depths=None):
    """Returns a dictionary of the encoding lengths for each symbol
    in the alphabet"""
    if depths is None:
        depths = {}

    if isinstance(root, InnerNode):
        get_encoding_lengths(root.left_child, current_level + 1, depths)
        get_encoding_lengths(root.right_child, current_level + 1, depths)
    else:
        depths[root.symbol] = current_level

    return depths


def min_max_encoding_lengths(root):
    """Get min and max encoding lengths generated by Huffman code"""
    symbols_and_lengths = get_encoding_lengths(root)
    lengths = list(symbols_and_lengths.values())
    return min(lengths), max(lengths)


def average_encoding_lengths(root):
    """Get average encoding length generated by Huffman code"""
    symbols_and_lengths = get_encoding_lengths(root)
    lengths = list(symbols_and_lengths.values())
    return sum(lengths)/len(lengths)
